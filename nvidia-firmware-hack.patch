--- a/kernel/nvidia/nv-acpi.c	2017-12-22 11:13:03.551686050 +1100
+++ b/kernel/nvidia/nv-acpi.c	2017-12-22 12:45:44.799378440 +1100
@@ -15,6 +15,14 @@
 #include "nv-linux.h"
 #include "nv-reg.h"
 
+// Generated with xxdi
+const unsigned char IMG_960m_bin[] = {
+  // VBIOS data - redacted here as I'm probably not allowed to redistribute it
+};
+
+// Generated with xxdi, length of array above
+const unsigned int IMG_960m_bin_len = 103936;
+
 #if defined(NV_LINUX_ACPI_EVENTS_SUPPORTED)
 static NV_STATUS   nv_acpi_extract_integer (const union acpi_object *, void *, NvU32, NvU32 *);
 static NV_STATUS   nv_acpi_extract_buffer  (const union acpi_object *, void *, NvU32, NvU32 *);
@@ -1305,14 +1313,17 @@
     NvU32 *pOutData
 )
 {
+    /*
     acpi_status status;
     struct acpi_buffer output = { ACPI_ALLOCATE_BUFFER, NULL };
     union acpi_object *rom;
     union acpi_object rom_arg[2];
     struct acpi_object_list input = { 2, rom_arg };
     acpi_handle dev_handle  = NULL;
+    */
     uint32_t offset, length;
 
+    /*
     if (!nv_acpi_get_device_handle(nv, &dev_handle))
         return NV_ERR_NOT_SUPPORTED;
 
@@ -1321,16 +1332,28 @@
 
     if (!NV_MAY_SLEEP())
     {
-#if defined(DEBUG)
+#if defined(DEBUG
         nv_printf(NV_DBG_ERRORS,
                   "NVRM: %s: invalid context!\n", __FUNCTION__);
 #endif
         return NV_ERR_NOT_SUPPORTED;
     }
+    */
 
     offset = pInData[0];
     length = pInData[1];
 
+    // XXX: It is important to note, that I have absolutely no idea what I'm
+    // doing here.
+
+    // XXX: Assuming our caller only calls us until it has the full image?
+    // Probably should check that offset + len is in bounds
+    memcpy(pOutData, IMG_960m_bin + offset, length);
+
+    // return NV_ERR_NOT_SUPPORTED;
+    return NV_OK;
+
+    /*
     rom_arg[0].type = ACPI_TYPE_INTEGER;
     rom_arg[0].integer.value = offset;
     rom_arg[1].type = ACPI_TYPE_INTEGER;
@@ -1363,6 +1386,7 @@
 
     kfree(output.pointer);
     return NV_OK;
+    */
 }

 /*
